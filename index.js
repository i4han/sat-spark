// Generated by CoffeeScript 1.6.2
var collections;

collections = function() {
  return {
    Users: {
      publish: function() {
        return this.Matches = db.Users.find({
          gender: 'F',
          public_ids: {
            $exists: true
          },
          location: {
            $near: {
              $geometry: {
                type: "Point",
                coordinates: [-118.3096648, 34.0655627]
              },
              $maxDistance: 20000,
              $minDistance: 0
            }
          }
        });
      },
      callback: function() {
        window.Matches = db.Users.find({}).fetch();
        return this.UserReady();
      },
      collections: {
        "fs.files": {
          publish: function() {
            return this.Files = db["fs.files"].find({
              _id: {
                $in: this.Matches.fetch().reduce((function(o, a) {
                  return o.concat(a.photo_ids);
                }), [])
              }
            });
          },
          callback: function() {
            return this.Files = db['fs.files'].find({}).fetch();
          },
          collections: {
            "fs.chunks": {
              publish: function() {
                return db["fs.chunks"].find({
                  files_id: {
                    $in: this.Files.fetch().map(function(a) {
                      return a._id;
                    })
                  }
                });
              },
              callback: function() {
                return this.Chunks = db['fs.chunks'].find({}).fetch();
              }
            }
          }
        }
      }
    }
  };
};

exports.Parts = function() {
  return {
    $header: function(t) {
      return HEADER({
        _bar: 'nav',
        _: H1({
          _title: {
            _: t
          }
        })
      });
    },
    $blockButton: function(o) {
      return BUTTON({
        _btn: 'block',
        id: o.id,
        _: o._
      });
    },
    $mp: function(v) {
      return {
        margin: v,
        padding: v
      };
    },
    $box: function(a) {
      return {
        width: a[0],
        height: a[1]
      };
    },
    $fixedTop: function(v) {
      return {
        position: 'fixed',
        top: v
      };
    },
    $fixedBottom: function(v) {
      return {
        position: 'fixed',
        bottom: v
      };
    },
    $photoCard: function(v) {
      return {
        background: 'white',
        borderRadius: 2,
        padding: v || '8px 6px',
        boxShadow: '1px 1px 5px 1px'
      };
    }
  };
};

exports.Modules = function() {
  var bottom, box, height, pic_height, pic_top, swipe, top, width;

  width = 375;
  height = 667;
  box = width / 5;
  top = 22;
  bottom = 44;
  swipe = 22;
  pic_top = top + box;
  pic_height = height - (pic_top + bottom);
  return {
    layout: function() {
      return {
        template: function() {
          return include('yield', 'tabBar');
        },
        head: function() {
          return [
            META({
              name: 'viewport',
              content: 'width=device-width initial-scale=1.0, user-scalable=no'
            }), TITLE(Settings.title)
          ];
        }
      };
    },
    tab: function() {
      return {
        template: function() {
          return A({
            _tabItem: {
              href: '{path}',
              _: SPAN(this)({
                s0: {
                  _icon: '{icon}'
                },
                s1: {
                  _tabLabel: {
                    _: '{label}'
                  }
                }
              })
            }
          });
        },
        helpers: x.reduce(['path', 'icon', 'label'], {}, function(o, v) {
          return x.object(o, v, function() {
            return Modules[this][v];
          });
        })
      };
    },
    tabBar: {
      template: function() {
        return NAV({
          _bar: 'tab',
          _: each({
            menu: include('tab')
          })
        });
      },
      helpers: {
        menu: function() {
          return 'chat camera spark settings login'.split(' ');
        }
      }
    },
    login: function() {
      var fbLogin;

      fbLogin = function() {
        return facebookConnectPlugin.login(["public_profile"], (function() {
          return console.log('fb connected');
        }), (function() {}));
      };
      return {
        icon: 'person',
        path: '/login',
        template: function() {
          return [
            {
              $header: 'Login'
            }, NAV(this)({
              b0: {
                _bar: 'standard footer-secondary',
                _: {
                  $blockButton: {
                    id: 'facebook',
                    _: 'login with facebook'
                  }
                }
              }
            })
          ];
        },
        style: {
          b0: {
            bottom: 70
          }
        },
        helpers: function() {
          return {
            token: function() {
              return facebookConnectPlugin.getAccessToken((function(token) {
                return Session.set('fbToken', token);
              }), (function() {}));
            }
          };
        },
        events: {
          'touchend #facebook': function() {
            return console.log('touch') || fbLogin();
          }
        }
      };
    },
    chat: {
      icon: 'play',
      path: '/chat',
      template: function() {
        return [
          {
            $header: 'Chat',
            _content: {
              _contentPadded: each({
                chats: DIV({
                  id: '{id}',
                  _chat: '{side}',
                  _: '{text}'
                })
              })
            }
          }, NAV({
            _bar: 'standard footer-secondary',
            _: INPUT(this)({
              input0: {
                type: 'text'
              }
            })
          })
        ];
      },
      style: {
        _contentPadded: {
          $fixedBottom: bottom * 2
        },
        _chat: {
          display: 'block'
        },
        _chatMe: {
          color: 'black'
        },
        _chatYou: {
          marginLeft: 20
        },
        _chatRead: {
          color: 'grey'
        },
        input0: {
          $fixedBottom: bottom,
          $box: ['100%', bottom],
          $mp: 0,
          border: 0
        }
      },
      helpers: {
        chats: function() {
          return db.Chats.find({});
        }
      },
      events: function() {
        var _this = this;

        return {
          'keypress [#input0]': function(e) {
            var Jinput, text;

            if (e.keyCode === 13 && (text = (Jinput = $(_this.Id('#input0'))).val())) {
              Jinput.val('');
              return Meteor.call('says', 'isaac', text);
            }
          }
        };
      },
      methods: {
        says: function(id, text) {
          return db.Chats.insert({
            id: id,
            text: text
          });
        }
      },
      collections: {
        Chats: {}
      }
    },
    spark: function() {
      var choose, icon_index, pass, push, setImage,
        _this = this;

      this.Matches = [];
      icon_index = 0;
      setImage = function(id, i) {
        return Session.set('img-photo-id', Matches[i].public_ids[0]);
      };
      pass = function(J) {
        return J.animate({
          top: '+=1000'
        }, 600, function() {
          return J.remove();
        });
      };
      choose = function(J) {
        return J.animate({
          top: top,
          width: box,
          left: box * icon_index++,
          clip: 'rect(0px, 75px, 75px, 0px)'
        }, 500, function() {
          return J.switchClass('photo-touched', 'icon', 300);
        });
      };
      push = function(i) {
        var Jfront, loaded, photo;

        loaded = true;
        Jfront = $('#photo-' + i);
        photo = Settings.image_url + Matches[i].public_ids[0];
        return Jfront.switchClass('photo-back', 'photo-front', 0, function() {
          return $('#photo-' + (i + 1)).css({
            left: 0..after(("<img id=photo-" + (i + 1) + " class=\"photo-back photo\" src=" + photo + ".jpg>").draggable({
              axis: 'y'.on('touchstart', function(e) {
                return Jfront.switchClass('photo-front', 'photo-touched', 100..on('touchend', function(e) {
                  switch (false) {
                    case !(e.target.y > pic_top + swipe):
                      return push(i + 1) && pass(Jfront);
                    case !(e.target.y < pic_top - swipe):
                      return push(i + 1) && choose(Jfront);
                    default:
                      return Jfront.switchClass('photo-touched', 'photo-front', 100, function() {
                        return Jfront.animate({
                          top: pic_top
                        }, 100);
                      });
                  }
                }));
              })
            }))
          });
        });
      };
      return {
        icon: 'star',
        path: '/',
        template: function() {
          return [
            {
              $header: 'Spark',
              _content: IMG({
                _photo: 'back',
                id: 'photo-0',
                src: 'spark0.jpg'
              })
            }
          ];
        },
        style: {
          _photo: {
            $fixedTop: pic_top,
            width: width,
            background: 'white',
            overflow: 'hidden'
          },
          _icon: {
            zIndex: 20,
            width: box,
            top: top,
            clip: 'rect(0px, 75px, 75px, 0px)'
          },
          _photoFront: {
            zIndex: 10,
            top: pic_top
          },
          _photoBack: {
            zIndex: -10,
            left: width
          },
          _photoTouched: {
            zIndex: 30,
            width: width - 1,
            $photoCard: ''
          }
        },
        collections: function() {
          return collections.call(this);
        },
        fn: {
          UserReady: function() {
            return push(0);
          }
        }
      };
    },
    camera: function() {
      var upload, uploadPhoto;

      uploadPhoto = function(uri) {
        var ft, o, options;

        return (ft = new FileTransfer()).upload(uri, Settings.upload, (function(r) {
          return console.log('ok', r);
        }), (function(r) {
          return console.log('err', r);
        }), x.assign(options = new FileUploadOptions(), o = {
          fileKey: 'file',
          fileName: uri.slice(uri.lastIndexOf('/') + 1),
          mimeType: 'image/jpeg',
          chunkedMode: true,
          params: {
            id: 'isaac'
          }
        }));
      };
      upload = function(url) {
        return resolveLocalFileSystemURL(url, (function(entry) {
          return entry.file((function(data) {
            var l;

            return console.log('data', data) || uploadPhoto(l = data.localURL);
          }), function(e) {
            return console.log(e);
          });
        }), function(e) {
          return console.log('resolve err', e);
        });
      };
      return {
        icon: 'info',
        path: '/camera',
        template: function() {
          return [
            {
              $header: 'Camera'
            }, IMG({
              id: 'camera-photo',
              style: 'width:100%;'
            })
          ];
        },
        onRendered: function() {
          var options;

          return navigator.camera.getPicture((function(uri) {
            return upload(uri);
          }), (function() {}), options = {
            quality: 90,
            cameraDirection: Camera.Direction.FRONT,
            destinationType: Camera.DestinationType.FILE_URI,
            encodingType: Camera.EncodingType.JPEG,
            sourceType: Camera.PictureSourceType.CAMERA
          });
        },
        onServer: function() {
          var Busboy, cloud, fs, _;

          fs = Npm.require('fs');
          Busboy = x.require('busboy');
          cloud = x.require('cloudinary');
          _ = Settings.cloudinary;
          cloud.config({
            cloud_name: _.cloud_name,
            api_key: _.api_key,
            api_secret: _.api_secret
          });
          Router.onBeforeAction(function(req, res, next) {
            var busboy, filenames;

            filenames = [];
            if (req.url === '/upload' && req.method === 'POST') {
              busboy = new Busboy({
                headers: req.headers
              });
              busboy.on('file', function(field, file, filename) {
                console.log('param', req);
                file.pipe(cloud.uploader.upload_stream(function(r) {
                  return console.log('stream', r, req.body.id);
                }));
                return filenames.push(filename);
              });
              busboy.on('finish', function() {
                req.filenames = filenames;
                return next();
              });
              busboy.on('field', function(field, value) {
                return req.body[field] = value;
              });
              return req.pipe(busboy);
            } else {
              return next();
            }
          });
          return Router.route('/upload', {
            where: 'server'
          }).post(function() {
            this.response.writeHead(200, {
              'Content-Type': 'text/plain'
            });
            return this.response.end("ok");
          });
        }
      };
    },
    chosenbox: {
      template: function() {
        return {
          _chosenContainer: {
            id: "chosen-{id}",
            style: "left:{left}px;",
            _: IMG({
              id: "chosen-box-{id}"
            })
          }
        };
      },
      style: {
        _chosenContainer: {
          $fixedTop: top,
          $box: [box, box],
          zIndex: 200,
          border: 3,
          overflowY: 'hidden'
        }
      }
    },
    chosen: {
      template: function() {
        return {
          '#chosen': each({
            chosen: include('chosenbox')
          })
        };
      },
      helpers: {
        chosen: [0, 1, 2, 3, 4].map(function(i) {
          return {
            id: i,
            left: box * i
          };
        })
      }
    },
    settings: {
      icon: 'gear',
      path: '/setting',
      template: function() {
        return [
          {
            $header: 'Settings'
          }, H2('Settings')
        ];
      }
    }
  };
};

exports.Settings = function() {
  var deploy_domain, local_ip;

  local_ip = '192.168.1.78';
  deploy_domain = 'spark5.meteor.com';
  return {
    app: {
      info: {
        id: 'com.spark.game',
        name: 'Spark game',
        description: 'Spark game long name.',
        website: 'http://sparkgame.com'
      },
      icons: {
        iphone: 'resources/icons/icon-60x60.png',
        iphone_2x: 'resources/icons/icon-60x60@2x.png'
      },
      setPreference: {
        BackgroundColor: '0xff0000ff',
        HideKeyboardFormAccessoryBar: true
      },
      configurePlugin: {
        'com.phonegap.plugins.facebookconnect': {
          APP_ID: process.env.FACEBOOK_CLIENT_ID,
          API_KEY: process.env.FACEBOOK_SECRET
        }
      },
      accessRule: ['http://localhost/*', 'http://meteor.local/*', "http://" + local_ip + "/*", "ws://" + local_ip + "/*", "http://" + deploy_domain + "/*", "ws://" + deploy_domain + "/*", 'http://res.cloudinary.com/*', 'mongodb://ds031922.mongolab.com/*']
    },
    deploy: {
      name: 'spark5',
      mobileServer: 'http://spark5.meteor.com'
    },
    title: function() {
      return this.app.info.name;
    },
    theme: "clean",
    lib: "ui",
    env: {
      production: {
        MONGO_URL: process.env.MONGO_URL
      }
    },
    npm: {
      busboy: "0.2.9",
      cloudinary: "1.2.1"
    },
    "public": {
      collections: {},
      image_url: "http://res.cloudinary.com/sparks/image/upload/",
      upload: "http://" + local_ip + ":3000/upload"
    },
    cloudinary: {
      cloud_name: "sparks",
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET
    },
    facebook: {
      oauth: {
        version: 'v2.3',
        url: "https://www.facebook.com/dialog/oauth",
        options: {
          query: {
            client_id: process.env.FACEBOOK_CLIENT_ID,
            redirect_uri: 'http://localhost:3000/home'
          }
        },
        secret: process.env.FACEBOOK_SECRET,
        client_id: process.env.FACEBOOK_CLIENT_ID
      }
    }
  };
};
